
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenges;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Challenge3 {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        /*BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        int pCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> p = IntStream.range(0, pCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
                .map(String::trim)
                .map(Integer::parseInt)
                .collect(toList());

        int qCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> q = IntStream.range(0, qCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
                .map(String::trim)
                .map(Integer::parseInt)
                .collect(toList());
*/
        List<Integer> result = Result.kthPerson(2, Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 3, 4));
        result.stream().forEach(System.out::println);

       /* bufferedWriter.write(
                result.stream()
                        .map(Object::toString)
                        .collect(joining("\n"))
                        + "\n"
        );
        bufferedReader.close();
        bufferedWriter.close();*/
    }

    static class Result {
        public static List<Integer> kthPerson(int busCapacity, List<Integer> p, List<Integer> q) {
            AtomicInteger countPassengerPerTurn = new AtomicInteger();
            AtomicInteger countPassengerTotal = new AtomicInteger();
            List<Integer> result = new ArrayList<>();
            List<Integer> pList = new LinkedList<>(p);
            List<Integer> qList = new LinkedList<>(q);
            qList.stream().forEach(busArrivalTime -> {
                //pList.stream().forEach(limitPatient -> {});
                for (int j = 0; j < pList.size(); j++) {
                    if (j < pList.size()) {
                        if (pList.get(j) < busArrivalTime) pList.remove(pList.get(j));
                    }
                }
                IntStream.iterate(0, i -> i + 1).limit(busCapacity).forEach(passengerPosition -> {
                    if (!pList.isEmpty()) {
                        pList.remove(pList.get(passengerPosition));
                        countPassengerPerTurn.set(countPassengerPerTurn.get() + 1);
                    } else {
                        countPassengerPerTurn.set(0);
                    }
                });
                if (countPassengerPerTurn.get() != 0) {
                    countPassengerTotal.set(countPassengerTotal.get() + countPassengerPerTurn.get());
                    result.add(countPassengerTotal.get());
                } else {
                    result.add(0);
                }
            });
            return result;
        }
    }
}

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenges;

import com.google.gson.Gson;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;


public class Challenge1 {

    public static void main(String[] args) throws IOException, InterruptedException {
        /*
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int userId = Integer.parseInt(bufferedReader.readLine().trim());
        int locationId = Integer.parseInt(bufferedReader.readLine().trim());
        int netStart = Integer.parseInt(bufferedReader.readLine().trim());
        int netEnd = Integer.parseInt(bufferedReader.readLine().trim());
        */

        int result = Result.getExpenditure(2, 8, 119, 212);
        System.out.println(result);
/*
        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
        */

    }

    static class Result {

        /*
         * Complete the 'getExpenditure' function below.
         *
         * The function is expected to return an INTEGER.
         * The function accepts following parameters:
         *  1. INTEGER userId
         *  2. INTEGER locationId
         *  3. INTEGER netStart
         *  4. INTEGER netEnd
         *
         *  https://jsonmock.hackerrank.com/api/transactions/search?userId=
         */

        public static int getExpenditure(int userId, int locationId, int netStart, int netEnd) throws IOException, InterruptedException {
            AtomicReference<Double> result = new AtomicReference<>((double) 0);
            try {
                URL url = new URL("https://jsonmock.hackerrank.com/api/transactions/search?userId=" + userId);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("GET");
                conn.setRequestProperty("Accept", "application/json");
                if (conn.getResponseCode() != 200) {
                    System.out.println("Exception in NetClientGet:- " + conn.getResponseCode());
                }
                InputStreamReader in = new InputStreamReader(conn.getInputStream());
                BufferedReader br = new BufferedReader(in);
                Gson gson = new Gson();
                UserInfo userInfo = gson.fromJson(br.readLine(), UserInfo.class);

                userInfo.getData().stream().forEach(data -> {
                    if (data.getLocation().getId() == locationId) {
                        System.out.println("IP: " + data.getIp());
                        String[] ipFormatted = data.getIp().split("\\.");
                        if (netStart <= Integer.valueOf(ipFormatted[0]) && Integer.valueOf(ipFormatted[0]) <= netEnd) {
                            String formatedAmount = data.getAmount().replace("$", "");
                            formatedAmount = formatedAmount.replaceAll(",", "");
                            result.set(result.get() + Double.valueOf(formatedAmount));
                        }
                    }
                });
                conn.disconnect();
            } catch (Exception e) {
                System.out.println("Exception in NetClientGet:- " + e);
            }
            return result.get().intValue();
        }

    }

    class Data {
        private Integer id;
        private Integer userId;
        private String userName;
        private String timestamp;
        private String txnType;
        private String amount;
        private Location location;
        private String ip;

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public Integer getUserId() {
            return userId;
        }

        public void setUserId(Integer userId) {
            this.userId = userId;
        }

        public String getUserName() {
            return userName;
        }

        public void setUserName(String userName) {
            this.userName = userName;
        }

        public String getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(String timestamp) {
            this.timestamp = timestamp;
        }

        public String getTxnType() {
            return txnType;
        }

        public void setTxnType(String txnType) {
            this.txnType = txnType;
        }

        public String getAmount() {
            return amount;
        }

        public void setAmount(String amount) {
            this.amount = amount;
        }

        public Location getLocation() {
            return location;
        }

        public void setLocation(Location location) {
            this.location = location;
        }

        public String getIp() {
            return ip;
        }

        public void setIp(String ip) {
            this.ip = ip;
        }
    }

    class Location {
        private Integer id;
        private String address;
        private String city;
        private Integer zipCode;

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public String getAddress() {
            return address;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        public String getCity() {
            return city;
        }

        public void setCity(String city) {
            this.city = city;
        }

        public Integer getZipCode() {
            return zipCode;
        }

        public void setZipCode(Integer zipCode) {
            this.zipCode = zipCode;
        }
    }

    class UserInfo {
        private Integer page;
        private Integer perPage;
        private Integer total;
        private Integer totalPages;
        private List<Data> data = null;

        public Integer getPage() {
            return page;
        }

        public void setPage(Integer page) {
            this.page = page;
        }

        public Integer getPerPage() {
            return perPage;
        }

        public void setPerPage(Integer perPage) {
            this.perPage = perPage;
        }

        public Integer getTotal() {
            return total;
        }

        public void setTotal(Integer total) {
            this.total = total;
        }

        public Integer getTotalPages() {
            return totalPages;
        }

        public void setTotalPages(Integer totalPages) {
            this.totalPages = totalPages;
        }

        public List<Data> getData() {
            return data;
        }

        public void setData(List<Data> data) {
            this.data = data;
        }
    }
}
